/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var Flow1 = /* color: #98ff00 */ee.FeatureCollection([]),
    Flow2 = /* color: #0b4a8b */ee.FeatureCollection([]),
    Flow3 = /* color: #ffc82d */ee.FeatureCollection([]),
    Flow4 = /* color: #00ffff */ee.FeatureCollection(
        [ee.Feature(
            ee.Geometry.Polygon(
                [[[-111.61600085555823, 35.63723136346284],
                  [-111.61694499313147, 35.63534791533073],
                  [-111.61398383437903, 35.635243278021974]]]),
            {
              "landcover": 3,
              "system:index": "0"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-111.60952063857825, 35.63130183963565],
                  [-111.61020728408606, 35.62990659363229],
                  [-111.60780402480871, 35.62997635651082]]]),
            {
              "landcover": 3,
              "system:index": "1"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-111.6148421412638, 35.62376722192051],
                  [-111.61673041641028, 35.622092765998886],
                  [-111.61218138992102, 35.62055781726819]]]),
            {
              "landcover": 3,
              "system:index": "2"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-111.62711592971594, 35.62425559829267],
                  [-111.63046332656653, 35.62125552488913],
                  [-111.62600013076575, 35.62034850379487]]]),
            {
              "landcover": 3,
              "system:index": "3"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-111.63535567580969, 35.622511383266534],
                  [-111.63647147475989, 35.61986010355991],
                  [-111.63209410964758, 35.61916238376435]]]),
            {
              "landcover": 3,
              "system:index": "4"
            })]),
    SPCRATER = 
    /* color: #bf04c2 */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[-111.67673953686432, 35.656831099310004],
          [-111.67673953686432, 35.57697972427941],
          [-111.59777530346588, 35.57697972427941],
          [-111.59777530346588, 35.656831099310004]]], null, false);
/***** End of imports. If edited, may not auto-convert in the playground. *****/

//-------------------------------------------------------
// Load the datasets, geometries, and visual parameter dictionaries 
//-------------------------------------------------------
 
 var SPCrater = SPCRATER
 
// Load Landsat 7 TOA dataset 
var landsat = ee.ImageCollection("LANDSAT/LE07/C01/T1_RT")

// Define bands to use to classify image
  var bandsToClassify = ['B1', 'B2', 'B3', 'B4', 'B5', 'B7'];

// Locate Santa Rosa, Peru
var SPCraterPoint = ee.Geometry.Point([-111.648621, 35.592826]);
   

// Visual Parameter Dictionaries
var landsatVis = {
  min: 0,
  max: 50,
  bands: ['B3', 'B2', 'B1']
};

var classifyVis = {
  min: 0,
  max: 3,
  palette: ['darkGreen', 'lightGreen', 'darkRed', 'lightBlue']
};


//*********************************************************
// Define the functions
//*********************************************************


//-------------------------------------------------------
// Function to get cloud-free landsat composite for given year
//-------------------------------------------------------
var getCloudFreeImage = function(year) {
  
    // Define start and end dates for images
  var startDate = ee.Date.fromYMD(year, 1, 1)
  var endDate = ee.Date.fromYMD(year, 12, 31)

  //Get the Landsat collection from given year for Santa Rosa, Peru
  var imageCollection = landsat
    .filterBounds(SPCrater)
    .filterDate(startDate, endDate);

  // Get a cloud-free Landsat composite image
  var image = ee.Algorithms.Landsat.simpleComposite(imageCollection);
  
  // return the image
  return image;
}
//-------------------------------------------------------

//-------------------------------------------------------
// Function to get total area in AOI of binary image
//-------------------------------------------------------
var getBinaryArea = function(binaryImage) {

  // Multiply binary pixels by their area
  var areaImage = binaryImage.multiply(ee.Image.pixelArea()); 

  // sum up pixels in AOI
  var summedArea = areaImage.reduceRegion({
    reducer: ee.Reducer.sum(),
    geometry: SPCrater,
    scale: 30,
    maxPixels: 1e10
  });
  
  return summedArea.get('classification');
}
//-------------------------------------------------------

//-------------------------------------------------------
// Function to train a classifier based on cloud-free landsat composite
//-------------------------------------------------------
var trainClassifier = function(year) {
  
  // Get cloud free landsat composite
  var image = getCloudFreeImage(year)

  // To define training set, display true color composite
  Map.centerObject(SPCraterPoint, 10);
  Map.addLayer(image, landsatVis, 'Training Image');

  // **TODO:  Use the polygon tool to define landcover training region
  //feature collection with property 'landcover'
  // Classification categories
  // 0: forest
  // 1: field
  // 2: mined
  // 3: river


  //Merge landcover FeatureCollections into single FeatureCollection.
  var classNames = forest.merge(fields).merge(mined).merge(river);

  // Sample the bands in the landcover feature collection
  var trainingData = image.select(bandsToClassify).sampleRegions({
    collection: classNames,
    properties: ['landcover'],
    scale: 30
  });

  //Train the classifier
  var classifier = ee.Classifier.smileCart().train({
    features: trainingData,
    classProperty: 'landcover',
    inputProperties: bandsToClassify
  });
  
  // Get a confusion matrix representing classification accuracy.
  var trainAccuracy = classifier.confusionMatrix();
  print('Confusion matrix: ', trainAccuracy);
  print('Training overall accuracy: ', trainAccuracy.accuracy());
  
  
  // Create feature to return
  var featureToReturn = ee.Feature(null, {
    'year': year,
    'classifier': classifier
	});
  return featureToReturn;
};
//-------------------------------------------------------


//-------------------------------------------------------
// Function to classify cloud-free landsat composite
//-------------------------------------------------------
var classifyLanduse = function(year) {

  // Get cloud free landsat composite
  var image = getCloudFreeImage(year)

  //Classify the image
  var classifiedImage = image.select(bandsToClassify).classify(classifier);

  // Classification categories
  // 0: forest
  // 1: field
  // 2: mined
  // 3: river
  
  // **TODO:  Create binary images of field and mined landuses and get their areas
  
  // Get binary image of field landuse
  var fieldsBinary = classifiedImage.eq(1);
  
  // Sum binary area of field landuse
  var fieldsArea = getBinaryArea(fieldsBinary);
  
 // Get binary image of mine landuse
  var minedBinary = classifiedImage.eq(2);
 
  // Sum binary area of field landuse
  var minedArea = getBinaryArea(minedBinary);

  // Create feature to return
  var featureToReturn = ee.Feature(null, {
    'year': year,
    'compositeImage': image,
    'classifiedImage': classifiedImage,
    'fieldArea': fieldsArea,
    'minedArea': minedArea
	});
  return featureToReturn;

};
//-------------------------------------------------------


//*********************************************************
//*********************************************************
// Analyses
//*********************************************************
//*********************************************************

// **TODO:  
// Call the trainClassifier() function to train the classifer 
//on a given year
var classifierFeature = trainClassifier(2020);

// Extract the classifier from returned feature
var classifier = ee.Classifier(classifierFeature.get('classifier'));


//-------------------------------------------------------------
// Use classifier to classify comosite image for given year
//-------------------------------------------------------------
/*
// Call classifyLanduse() function to classify landsat composite
//image for given year
var year = 2020;
var classifiedFeature =classifyLanduse(year)

// Extract out composite image
var compositeImage = ee.Image(classifiedFeature.get('compositeImage'));

// Extract out classified image
var classifiedImage = ee.Image(classifiedFeature.get('classifiedImage'));

// Extact field and mined area
var fieldArea = ee.Number(classifiedFeature.get('fieldArea'));
var minedArea = ee.Number(classifiedFeature.get('minedArea'));


// Convert to square km
var fieldArea = fieldArea.divide(1e6)
var minedArea = minedArea.divide(1e6)
print('Field area: ', fieldArea)
print('Mined area: ', minedArea)


// Add the true color image to the display
Map.addLayer(compositeImage, landsatVis, 'True Color');

// Add the classified image to the display
Map.addLayer(classifiedImage, classifyVis, 'Classified');

*/




// TODO:
// Create list of years for which there are Landsat 7 images
var years = ee.List.sequence(2017, 2021);



// Call classifyLanduse() function to classify landsat composite
//image for given year
var goldStuff = function(year) {
var classifiedFeature =classifyLanduse(year)

// Extract out composite image
var compositeImage = ee.Image(classifiedFeature.get('compositeImage'));

// Extract out classified image
var classifiedImage = ee.Image(classifiedFeature.get('classifiedImage'));

// Extact field and mined area
var fieldArea = ee.Number(classifiedFeature.get('fieldArea'));
var minedArea = ee.Number(classifiedFeature.get('minedArea'));


// Convert to square km
var fieldArea = fieldArea.divide(1e6)
var minedArea = minedArea.divide(1e6)

  // Create feature to return
  var featureToReturn = ee.Feature(null, {
    'year': year,
    'fieldArea': fieldArea,
    'minedArea': minedArea
	});
  return featureToReturn;
  
}

// Map the yearlyAvePcpt function to each element in the list and
// organize the returned ee.Features (from the function)
// into a Feature Collection
var landuseCollection =
 ee.FeatureCollection(years.map(goldStuff));


Export.table.toDrive({
  collection: landuseCollection,
  folder: 'earthengine/exercise11',
  fileNamePrefix: 'santaRosaLandUseLS7',
  fileFormat: 'CSV'});

