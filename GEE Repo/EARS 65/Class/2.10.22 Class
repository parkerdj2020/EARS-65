// Load Terra Surface Reflectance 8-Day Global 500m
var modisSRDataset = ee.ImageCollection("MODIS/006/MOD09A1") 

//Import Hydrosheds from GEE data catalog
var allBasins = ee.FeatureCollection("WWF/HydroSHEDS/v1/Basins/hybas_1")

// Get Greenland watershed
var selectedBasin = allBasins.filter(ee.Filter.eq('HYBAS_ID', 9010000010))
var basinBoundary = selectedBasin.geometry()



//------------------------------------------------------
// Utility code to change band names and extract parts of a bitmask
//------------------------------------------------------

// Band Names
var modisBandNames = ['sur_refl_b03','sur_refl_b04','sur_refl_b01','sur_refl_b02','sur_refl_b06','sur_refl_b07', 'StateQA'];
var standardBandNames = ['blue','green','red','nir','swir1','swir2', 'StateQA'];

// Helper function to extract the bits in a bitmask for an image
function getQABits(image, start, end, newName) {
    // Compute the bits we need to extract.
    var pattern = 0;
    for (var i = start; i <= end; i++) {
       pattern += Math.pow(2, i);
    }
    // Return a single band image of the extracted QA bits, giving the band
    // a new name.
    return image.select([0], [newName])
                  .bitwiseAnd(pattern)
                  .rightShift(start);
}
//------------------------------------------------------



//------------------------------------------------------
// A function to add the snow type index as an image band
//------------------------------------------------------
function addSnowType(image) {


  // Compute the snow type index  (nir - swir1) / (nir + swir1)
  //var swir1 = image.select('swir1');
  //var nir = image.select('nir');
  //var snowType = nir.subtract(swir1).divide(nir.add(swir1)).rename('SnowType');
  
  // Claculate snow type using normalizedDifference([list of bandname]).rename()
   var snowType = image.normalizedDifference(['nir', 'swir1']).rename('SnowType');

  //Add the snow type band to the image and return
  return image.addBands([snowType]);
}
//------------------------------------------------------



//------------------------------------------------------
// Function to mask an image based on its cloud state
//------------------------------------------------------
function maskClouds(image) {
  // Extract out the cloud state
  /*Bits 0-1: Cloud state
    0: Clear (white)
    1: Cloudy (red)
    2: Mixed (green)
    3: Note set - assumed clear (blue)
    */
  var cloudState =   getQABits(image.select('StateQA'),0,1,'cloud_state'); 

  // Return image after retaining only those pixels where cloud state = 0 (Clear)
  return image.updateMask(cloudState.select('cloud_state').eq(0));
}
//------------------------------------------------------


//------------------------------------------------------
// Function to get late summer snow type over Greenland, masking for clouds
//------------------------------------------------------

function getSnowType(year) {

  // Define end of summer dates
  var startDate = ee.Date.fromYMD(year,8,1);
  var endDate = ee.Date.fromYMD(year,8,31);

  // Filter for dates and rename bands
  var filteredModis = modisSRDataset.filterDate(startDate,endDate)
                             .select(modisBandNames,standardBandNames);

  // Mask clouds
  var noCloud = filteredModis.map(maskClouds);

  // Add Snow Type band
  var noCloudSnowType = noCloud.map(addSnowType);

  // Get median image with Snow Type
  var medianImage = noCloudSnowType.median()

  // Map the clipping function to annualSnowMap image collection
  var croppedMedianImage = medianImage.clip(basinBoundary);

  // Extract median Snow Type
  var snowTypeImage = croppedMedianImage.select('SnowType');
  
  return snowTypeImage;
}

//------------------------------------------------------
// Function to get late summer true color image, masking for clouds
//------------------------------------------------------

function getTrueColor(year) {

  // Define end of summer dates
  var startDate = ee.Date.fromYMD(year,8,1);
  var endDate = ee.Date.fromYMD(year,8,31);

  // Filter for dates and rename bands
  var filteredModis = modisSRDataset.filterDate(startDate,endDate)
                             .select(modisBandNames,standardBandNames);

  // Mask clouds
  var noCloud = filteredModis.map(maskClouds);

  // Add Snow Type band
  var noCloudSnowType = noCloud.map(addSnowType);

  // Get median image with Snow Type
  var noCloudImage = noCloudSnowType.median()

  return noCloudImage;
}

//------------------------------------------------------
// visParams Dictionaries
//------------------------------------------------------


// True color visParams
var trueColorVis = {
  min: 0,
  max: 3000,
  gamma: 1.3,
  bands:['red','green','blue']
};

// ND snow type visParams
var ndsiVis = {
  min: 0.6,
  max: .9,
  palette: ['blue', 'purple', 'cyan', 'green', 'yellow', 'red']
};


//******************************************************
// Center map and add true color and snow type images
//******************************************************


// Center map on selected basin
Map.centerObject(selectedBasin, 2);

// Add true color median image to display
Map.addLayer(getTrueColor(2021), trueColorVis, 'True Color');

// Add Snow Type to display
Map.addLayer(getSnowType(2021), ndsiVis, 'Snow Type');


//------------------------------------------------------
// Create histogram snow type
//------------------------------------------------------

// Pre-define some customization options.
var options = {
  title: 'Late Summer Snow Type Histogram',
  fontSize: 20,
  hAxis: {
            title: 'Snow Type',
            viewWindow: {min: 0.6, max: 0.9},
          },
  vAxis: {title: 'count of Snow Type'},
  series: {
    0: {color: 'Black'}}};


// Make the histogram, set the options.
var histogram = ui.Chart.image.histogram(getSnowType(2020), basinBoundary, 10000)
    .setSeriesNames(['Snow Type'])
    .setOptions(options);

print(histogram)




// Create list of years which there are Modis data
var years = ee.List.sequence(2000, 2021);

// Map the getSnowType() function over the list of years
var snowTypeCollection = ee.ImageCollection(years.map(getSnowType));


//------------------------------------------------------
// Create animation of late summer snow type
//------------------------------------------------------


// Define arguments for animation function parameters.
var videoArgs = {
  region: basinBoundary,
  framesPerSecond: 1,
  crs: 'EPSG:3857',
  scale: 10000,
  min: 0.6,
  max: .9,
  palette: ['blue', 'purple', 'cyan', 'green', 'yellow', 'red']
};

// Print the animation to the console as a ui.Thumbnail using the above defined
// arguments. 
print(ui.Thumbnail(snowTypeCollection, videoArgs));

// Alternatively, print a URL that will produce the animation when accessed.
print(snowTypeCollection.getVideoThumbURL(videoArgs));


