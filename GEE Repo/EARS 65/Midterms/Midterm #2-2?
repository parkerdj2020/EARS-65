//Midterm #2
//load Landsat Data
var landsatData = ee.ImageCollection("LANDSAT/LC08/C02/T1_TOA")
//create geometry points
var coldSprings = /* color: #d63000 */ee.Geometry.Point(-105.52, 39.97);
var ColdSpringsBurn = /* color: #d63000 */ee.Geometry.Polygon(
        [[[-105.49759819030761, 39.99104603901535],
          [-105.49502326965332, 39.97447282567355],
          [-105.45433952331543, 39.97578830693118],
          [-105.45966102600097, 39.989336290298006]]]);
var BeaverCreek = /* color: #98ff00 */ee.Geometry.Polygon(
        [[[-106.61711275050988, 41.018855193661935],
          [-106.6514450259005, 40.993983155599416],
          [-106.65487825343956, 40.966509375434924],
          [-106.63908540675988, 40.94213626118921],
          [-106.6514450259005, 40.939024152126464],
          [-106.65213167140831, 40.91515977794812],
          [-106.52304231593956, 40.87363599269821],
          [-106.50656282375206, 40.930724477751056],
          [-106.459184283713, 40.92864939623475],
          [-106.42897188136925, 40.954064654147395],
          [-106.42416536281456, 40.97895175024636],
          [-106.43927156398644, 40.996574430904005],
          [-106.48733674953331, 41.00227487802971],
          [-106.51892244289269, 40.98880029941943],
          [-106.56561433742394, 41.002793076049116]]]);
//center on cold spring fire
Map.centerObject(coldSprings, 13)
//filter images to after fire
var fireDate = ee.Date.fromYMD(2016, 7, 16)
var fireEndDate = ee.Date.fromYMD(2016, 8, 01)
//determine bands and new band names
var landsatBandNames = ['B2', 'B3', 'B4', 'B5', 'B6', 'B7']
var standardBandNames = ['Blue', 'Green', 'Red', 'NIR', 'SWIR1', 'SWIR2']

// Get first image in date range 
// Use .select() method to rename its bands using standard band names
var firstImage = landsatData.filterDate(fireDate,fireEndDate)
                                .filterBounds(coldSprings)
                                .first()
                                .select(landsatBandNames,standardBandNames);
                              

// Define True Color visParams and display image
var modisVis = {
  min:0,
  max:.5,
  bands:['Red','Green','Blue'],
  gamma:1.5};
  
// Add firstImage to map
Map.addLayer(firstImage, modisVis, "True Color")
print(firstImage)

//*********************************************************************************************************


//create function to add NDVI band to map
function addNDVI(image) {
  //normalize bands
  var ndvi = image.normalizedDifference(['NIR','Red']).rename('NDVI');
  return image.addBands([ndvi]);
}
//add NDVI to fire image
var firstImageNDVI = addNDVI(firstImage);
//create image of fire scar with just NDVI
var fireImageNDVI = firstImageNDVI.select('NDVI');
// Normalized Difference visParams
var ndVis = {
 min: 0,
 max: .80,
 palette: ['red', 'white', 'blue']
}
//add scar image to map
Map.addLayer(fireImageNDVI, ndVis, 'Fire Image NDVI');




//*********************************************************************************************************

//WILL EXPORT AN NDVI IMAGE with no cloud post fire
var visParams = {bands: ['B4', 'B3', 'B2'], min:0,max: 1000};
// Helper function to extract the bits in a bitmask for an image
function getQABits(image, start, end, newName) {
    // Compute the bits we need to extract.
    var pattern = 0;
    for (var i = start; i <= end; i++) {
       pattern += Math.pow(2, i);
    }
    // Return a single band image of the extracted QA bits, giving the band
    // a new name.
    return image.select([0], [newName])
                  .bitwiseAnd(pattern)
                  .rightShift(start);
}


// 1-bit mask (2^1 = 2 possible values)
var binaryVis = {
  min: 0,
  max: 1,
  palette: ['white', 'red']
}
//create var to limit to CLEAR
var clearState =   getQABits(landsatData.filterDate(fireDate,fireEndDate)
                                             .filterBounds(coldSprings)
                                            .first()
                                            .select('QA_PIXEL'),6,6,'Clear');
//update mask to clear
var noCloudFire = fireImageNDVI.updateMask(clearState)
//Map.addLayer(clearState, binaryVis, 'CloudState');
//add to map
Map.addLayer(noCloudFire, ndVis, 'No Cloud Fire NDVI')



//*********************************************************************************************************

//establish pre-fire dates
var prefireStart = ee.Date.fromYMD(2016, 6, 30)
var prefireEnd = ee.Date.fromYMD(2016, 7, 10)

var preImage = landsatData.filterDate(prefireStart,prefireEnd)
                                .filterBounds(coldSprings)
                                .first()
                                .select(landsatBandNames,standardBandNames);

//add NDVI to prefire image
var prefirstImageNDVI = addNDVI(preImage);
//create image of prefire scar with just NDVI
var prefireImageNDVI = prefirstImageNDVI.select('NDVI');
//clear clouds of prefire image
var preFireClearState =   getQABits(landsatData.filterDate(prefireStart,prefireEnd)
                                             .filterBounds(coldSprings)
                                            .first()
                                            .select('QA_PIXEL'),6,6,'Clear');
var noCloudPreFire = prefireImageNDVI.updateMask(preFireClearState)
                                  
//make difference image and display
var difNVDI = fireImageNDVI.subtract(prefireImageNDVI)
//Map.addLayer(difNVDI, ndVis, 'DIFND')
//make difference image with no clouds and display
var maskedDifNoCloud = noCloudFire.updateMask(preFireClearState)
Map.addLayer(maskedDifNoCloud, ndVis, 'No Cloud DIF NDVI')


//*********************************************************************************************************

//Create an image of post-fire NBRI and use this image to create a binary image where the
//burned areas have a value of 1.0 and the unburned areas are masked (transparent). Overlay this
//masked post-fire NBRI binary image on the post-fire true color image, coloring the burned areas
//red. Set the zoom level to show the details of the lake and burned area. Take a screenshot and
//save it to your word file.

// Compute the NBRI
 var nir = firstImage.select('NIR');
 var swir2 = firstImage.select('SWIR2');
 var nbri = nir.subtract(swir2).divide(nir.add(swir2)).rename('NBRI');

//visParams for NBRI
var ndwiParams = {
  min: -1,
  max: 1,
  palette: ['green', 'white', 'blue']
};
//add NBRI to map
//Map.addLayer(nbri, ndwiParams);
// Create a binary image where burn = 1, everything else = 0
var binaryImage = nbri.lt(-.12);
//add to map
//Map.addLayer(binaryImage, {min:0, max:1, palette: ['red', 'white']}, 'Binary Image');

// Use the binary image as a mask to retain only the burn
var burnOnly = binaryImage.updateMask(binaryImage);
Map.addLayer(burnOnly, {palette: ['red']})

//*********************************************************************************************************

// Calculate burn of cold Springs Burn
 var areaImage = binaryImage.multiply(ee.Image.pixelArea());
 var area = areaImage.reduceRegion({
 reducer: ee.Reducer.sum(),
 geometry: ColdSpringsBurn,
 scale: 100,
 });
 //Extract burn area and convert to km2
 var waterAreaSqKm =
 ee.Number(area.get('NBRI')).divide(1e6)
print('Cold Spring Burn Area in km^2: ', waterAreaSqKm);

//*********************************************************************************************************
// Calculate burn of Beaver Creek Burn
 var areaImage = binaryImage.multiply(ee.Image.pixelArea());
 var area = areaImage.reduceRegion({
 reducer: ee.Reducer.sum(),
 geometry: BeaverCreek,
 scale: 100,
 });
 //Extract burn area and convert to km2
 var waterAreaSqKm =
 ee.Number(area.get('NBRI')).divide(1e6)
print('Beaver Creek Burn Area in km^2: ', waterAreaSqKm);


