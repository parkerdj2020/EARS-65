//Load the Sentinel 1 SAR dataset  
 var sarDataset = ee.ImageCollection("COPERNICUS/S1_GRD")  
  
// Filter to retain only the VV polarization data 
var vvSarDataset= sarDataset 
   .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VV')) 
   .select('VV'); 
   
   
// Load the SRTM data to create hillsade image 
var srtmImage = ee.Image('CGIAR/SRTM90_V4'); 

// Add European Commission's Joint Research Centre (JRC) mask on surface water  
// seasonality to mask  pixels from areas of "permanent" water defined as 
// where there is water > 10 months of the year. 
var surfaceWater = 
ee.Image("JRC/GSW1_3/GlobalSurfaceWater").select('seasonality'); 
var surfaceWater_mask = surfaceWater.unmask().gte(10); 

//------------------- 
//          England 2020 
//------------------- 
var dates_pre_flood =['2020-02-10','2020-02-24']; 
var dates_post_flood=['2020-02-24','2020-03-15']; 
var map_center=[52.75585,-2.99737]; 
var Direction = "DESCENDING"; 


var getFloodImage = function(latitude, longitude, floodDate, orbitDirection) {


// Center map display on flood region 
var Latitude  = map_center[0]; 
var Longitude = map_center[1]; 
Map.setCenter(Longitude,Latitude, 10); 
 
// Get the a hillshade image of srtm and add to display 
var hillShade = ee.Terrain.hillshade(srtmImage); 
//Map.addLayer(hillShade, {}, 'Hillshade'); 



// Get Pre flood image 
var preStartDate = ee.Date(dates_pre_flood[0]); 
var preEndDate = ee.Date(dates_pre_flood[1]); 
 
var preImage = vvSarDataset 
    .filterBounds(ee.Geometry.Point([Longitude, Latitude])) 
    .filter(ee.Filter.eq('orbitProperties_pass', Direction)) 
    .filterDate(preStartDate, preEndDate) 
    .mosaic(); 
 
// Get Post flood image 
var postStartDate = ee.Date(dates_post_flood[0]); 
var postEndDate = ee.Date(dates_post_flood[1]); 
 
var postImage = vvSarDataset 
    .filterBounds(ee.Geometry.Point([Longitude, Latitude])) 
    .filter(ee.Filter.eq('orbitProperties_pass', Direction)) 
    .filterDate(postStartDate, postEndDate) 
    .sort('system:time_start', false) 
    .mosaic(); 
    
// Add the pre and post SAR images to the display 
// sar visParams 
var sarVis = { 
  min: -30, 
  max: 0 
} 
 
//Add SAR images to display 
//Map.addLayer(preImage, sarVis, 'Before flood'); 
//Map.addLayer(postImage, sarVis, 'After flood'); 

// Make a false color composite  
var falseColor = preImage.addBands(postImage); 
falseColor = falseColor.addBands(postImage) 
  .select(['VV', 'VV_1', 'VV_2'], ['pre', 'post', 'post1']); 
 

//Map.addLayer(falseColor, sarVis, 'False Color') 

return falseColor
}

// Add the false color images to the display 
// false color visParams 
var falseColorVis = { 
  min: -30, 
  max: 0 
} 

Map.addLayer(getFloodedImage(['2015-03-08','2015-03-25'], ))
var dates_pre_flood =['2015-03-08','2015-03-25'];
var dates_post_flood=[
  '2015-09-01','2015-09-08'];
var map_center=[24.82,94.92];
var Direction = "ASCENDING";
*/


/*
// Reduce the radar noise by smoothing   
var smoothing_radius = 100; 
var preImage = preImage.focal_mean(smoothing_radius, 'circle', 'meters'); 
var postImage = postImage.focal_mean(smoothing_radius, 'circle', 'meters'); 
 
// Create image of difference in smoothed radar intensities to 
// identify "flooded" areas. 
var sarDifference = postImage.subtract(preImage); 
 
// sar difference visParams 
var sarDifferenceVis = { 
  min: -10, 
  max: 10 
} 
 
//Map.addLayer(sarDifference, sarDifferenceVis, 'After - before');

// Create binary image with threshold change 
var diff_binary = sarDifference.lt(-3); 
 
//Define landMask as areas w/o permanent surface water 
var landMask = surfaceWater_mask.not(); 
 
//Combine binary flood and surface water masks 
var flooded_mask = diff_binary.multiply(landMask); 
 
//Update mask 
var flooded = diff_binary.updateMask(flooded_mask);  
 
Map.addLayer(flooded, {min:0,max:1, palette: "blue"}, 'Flooded'); 

*/
